#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <semaphore.h>
#include <time.h>
#include <string.h>

#define NUM_PROCESSES 4  // Número de processos a ser criado (parametrizável)
#define EXECUTION_TIME 10  // Tempo máximo de execução em segundos

// Estrutura para memória compartilhada
typedef struct {
    int best_result;  // Melhor resultado encontrado
    sem_t semaphore;  // Semáforo para sincronização
} SharedMemory;

// Função que simula o algoritmo X
int algoritmoX() {
    // Algoritmo fictício que gera um número aleatório entre 1 e 100
    return rand() % 100 + 1;
}

int main() {
    // Inicialização da memória compartilhada
    SharedMemory *shared_memory = mmap(NULL, sizeof(SharedMemory),
                                        PROT_READ | PROT_WRITE,
                                        MAP_SHARED | MAP_ANONYMOUS, -1, 0);
    if (shared_memory == MAP_FAILED) {
        perror("Falha ao mapear memória compartilhada");
        exit(EXIT_FAILURE);
    }

    // Inicializar o semáforo e o melhor resultado
    sem_init(&shared_memory->semaphore, 1, 1);  // 1 significa semáforo compartilhado entre processos
    shared_memory->best_result = 0;

    // Semear o gerador de números aleatórios
    srand(time(NULL));

    // Criar processos
    pid_t pids[NUM_PROCESSES];
    for (int i = 0; i < NUM_PROCESSES; i++) {
        pids[i] = fork();
        if (pids[i] < 0) {
            perror("Falha ao criar processo");
            exit(EXIT_FAILURE);
        }

        // Código do processo filho
        if (pids[i] == 0) {
            time_t start_time = time(NULL);
            while (time(NULL) - start_time < EXECUTION_TIME) {
                int result = algoritmoX();

                // Atualizar o melhor resultado de forma controlada
                sem_wait(&shared_memory->semaphore);
                if (result > shared_memory->best_result) {
                    shared_memory->best_result = result;
                    printf("Processo %d encontrou um novo melhor resultado: %d\n", getpid(), result);
                }
                sem_post(&shared_memory->semaphore);

                // Simular algum tempo de execução
                usleep(100000);  // 100ms
            }
            exit(EXIT_SUCCESS);
        }
    }

    // Código do processo pai
    for (int i = 0; i < NUM_PROCESSES; i++) {
        waitpid(pids[i], NULL, 0);  // Esperar todos os filhos terminarem
    }

    // Exibir o melhor resultado encontrado
    printf("O melhor resultado encontrado foi: %d\n", shared_memory->best_result);

    // Limpeza
    sem_destroy(&shared_memory->semaphore);
    munmap(shared_memory, sizeof(SharedMemory));

    return 0;
}